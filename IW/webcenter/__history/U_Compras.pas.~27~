unit U_Compras;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, U_FrmPadrao, IWVCLComponent,
  IWBaseLayoutComponent, IWBaseContainerLayout, IWContainerLayout,
  IWTemplateProcessorHTML, IWCompButton, IWVCLBaseControl, IWBaseControl,
  IWBaseHTMLControl, IWControl, IWCompEdit, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt,
  Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client, IWCompGrids, IWDBGrids;

type
  TFormCompras = class(TFrmPadrao)
    q_datatable: TFDQuery;
    q_compras_itens: TFDQuery;
    ds_compras_itens: TDataSource;
    grid_compras_itens: TIWDBGrid;
    q_compras_itensCoditem: TStringField;
    q_compras_itensItem: TStringField;
    q_compras_itensQtde: TFMTBCDField;
    q_compras_itensFornecedor: TStringField;
    q_compras_itensPreçoUn: TFMTBCDField;
    q_compras_itensPreçoLíqFinal: TFMTBCDField;
    q_compras_itensPreçoContábil: TFMTBCDField;
    q_geral: TFDQuery;
    q_aux: TFDQuery;
    q_aux2: TFDQuery;
    procedure IWBTNACAOAsyncClick(Sender: TObject; EventParams: TStringList);
    procedure IWAppFormCreate(Sender: TObject);
    procedure excluir_compra(p_controle : integer;p_cod_empresa : integer);
  private
    { Private declarations }
  public
    { Public declarations }
         procedure TBCompras(aParams: TStrings; out aResult: string);
  end;

var
  FormCompras: TFormCompras;

implementation

{$R *.dfm}

uses U_DM, ServerController, SweetAlerts, UserSessionUnit, System.StrUtils;

procedure TFormCompras.excluir_compra(p_controle, p_cod_empresa: integer);
begin

try

  controller.dm.banco.StartTransaction;

 // Localiza Item da NF

  q_geral.Close;
  q_geral.SQL.Clear;
  q_geral.SQL.Text :=
  ' select qtde,cod_item,cod_empresa,cod_fornecedor,locacao,cod_local_estoque from compras_itens ' +
  ' where cod_controle= :cod_controle ' +
  ' and cod_empresa =   :cod_empresa ' ;
  q_geral.ParamByName('cod_empresa').AsInteger := p_cod_empresa;
  q_geral.ParamByName('cod_controle').AsInteger := p_controle;
  q_geral.Open();

  //Ajusta Estoque
    q_aux.Close;
    q_aux.SQL.Clear;
    q_aux.SQL.Text :=
    '  update estoque set qtde = qtde - :p_qtde ' +
    '  where cod_item=  :cod_item ' +
    '  and cod_empresa= :cod_empresa ' +
    '  and cod_fornecedor = :cod_fornecedor ';


    q_aux.ParamByName('p_qtde').AsInteger         := q_geral.FieldByName('qtde').AsInteger;
    q_aux.ParamByName('cod_item').AsString        := q_geral.FieldByName('cod_item').AsString;
    q_aux.ParamByName('cod_empresa').AsInteger    := controller.xcod_empresa;
    q_aux.ParamByName('cod_fornecedor').AsInteger := q_geral.FieldByName('cod_fornecedor').AsInteger;

    q_aux.ExecSQL;

    //Ajusta locação
    q_aux.Close;
    q_aux.SQL.Clear;
    q_aux.SQL.Text :=
    '  update locacao set qtde = qtde - :p_qtde ' +
    '  where cod_item=  :cod_item ' +
    '  and cod_empresa= :cod_empresa ' +
    '  and cod_fornecedor = :cod_fornecedor ' +
    '  and cod_local_estoque = :cod_local_estoque ' +
    '  and locacao= :locacao ';

    q_aux.ParamByName('p_qtde').AsInteger             := q_geral.FieldByName('qtde').AsInteger;
    q_aux.ParamByName('cod_item').AsString            := q_geral.FieldByName('cod_item').AsString;
    q_aux.ParamByName('cod_empresa').AsInteger        := controller.xcod_empresa;
    q_aux.ParamByName('cod_fornecedor').AsInteger     := q_geral.FieldByName('cod_fornecedor').AsInteger;
    q_aux.ParamByName('cod_local_estoque').AsInteger  := q_geral.FieldByName('cod_local_estoque').AsInteger;
    q_aux.ParamByName('locacao').AsString            := q_geral.FieldByName('locacao').AsString;
    q_aux.ExecSQL;

    // Ajusta itens histórico

     //Busca ultimo histórico do item
           q_aux.Close;
           q_aux.SQL.Clear;
           q_aux.SQL.Text:=

           '   select sequencia, qtde_operacao,cod_controle,documento,serie,      ' +
           '          qtde_depois,                                                ' +
           '          custo_medio,                                                ' +
           '          custo_medio_anterior                                        ' +
           '     from itens_historico a                                           ' +
           '    where                                        ' +
           '                                                ' +
           '       sequencia = (select max(sequencia)                          ' +
           '                         from itens_historico b                       ' +
           '                        where a.cod_item = b.cod_item                 ' +
           '                          and a.cod_fornecedor = b.cod_fornecedor     ' +
           '                          and a.cod_empresa = b.cod_empresa           ' +
           '      and cod_item = :cod_item                                        ' +
           '      and cod_fornecedor = :cod_fornecedor                            ' +
           '      and cod_empresa = :cod_empresa                                  ';

           q_aux.ParamByName('cod_item').AsString          :=  q_geral.FieldByName('cod_item').AsString;
           q_aux.ParamByName('cod_fornecedor').AsInteger   :=  q_geral.FieldByName('cod_fornecedor').AsInteger;
           q_aux.ParamByName('cod_empresa').AsInteger      :=  controller.xcod_empresa;
           q_aux.Open();

           q_aux2.Close;
           q_aux2.SQL.Clear;
           q_aux2.sql.add('insert into itens_historico');
           q_aux2.sql.add('(cod_controle,');
           q_aux2.sql.add('cod_empresa,');
           q_aux2.sql.add('cod_fornecedor,');
           q_aux2.sql.add('cod_item,');
           q_aux2.sql.add('cod_operacao,');
           q_aux2.sql.add('custo_medio,');
           q_aux2.sql.add('custo_medio_anterior,');
           q_aux2.sql.add('data,');
           q_aux2.sql.add('documento,');
          // q_aux2.sql.add('hora,');
           q_aux2.sql.add('motivo,');
           q_aux2.sql.add('qtde_depois,');
           q_aux2.sql.add('qtde_operacao,');
           q_aux2.sql.add('responsavel,');
           q_aux2.sql.add('sequencia,');
           q_aux2.sql.add('serie,');

           q_aux2.sql.add('tipo_operacao)');

           q_aux2.sql.add('values');

           q_aux2.sql.add('(:cod_controle,');
           q_aux2.sql.add(':cod_empresa,');
           q_aux2.sql.add(':cod_fornecedor,');
           q_aux2.sql.add(':cod_item,');
           q_aux2.sql.add(' 2 ,');
           q_aux2.sql.add(':custo_medio,');
           q_aux2.sql.add(':custo_medio_anterior,');
           q_aux2.sql.add('sysdate ,');
           q_aux2.sql.add(':documento,');

           q_aux2.sql.add('''Cancelamento de NF'',');
           q_aux2.sql.add(':qtde_depois,');
           q_aux2.sql.add(':qtde_operacao,');
           q_aux2.sql.add(' user ,');
           q_aux2.sql.add(' seq_controle_historico.nextval,');
           q_aux2.sql.add(':serie,');

           q_aux2.sql.add(' ''S'' )');

           q_aux2.ParamByName('cod_controle').AsInteger      := q_aux.FieldByName('cod_controle').AsInteger;
           q_aux2.ParamByName('cod_empresa').AsInteger       := controller.xcod_empresa;
           q_aux2.ParamByName('cod_fornecedor').AsInteger    := q_geral.FieldByName('cod_fornecedor').AsInteger;
           q_aux2.ParamByName('cod_item').AsString           := q_geral.FieldByName('cod_item').AsString;
           q_aux2.ParamByName('custo_medio').AsFloat         := q_aux.FieldByName('custo_medio_anterior').AsFloat;
           q_aux2.ParamByName('custo_medio_anterior').AsFloat:= q_aux.FieldByName('custo_medio').AsFloat;
           q_aux2.ParamByName('documento').AsString          := q_aux.FieldByName('documento').AsString;
           q_aux2.ParamByName('qtde_depois').AsFloat         := q_aux.FieldByName('qtde_depois').AsFloat - q_geral.FieldByName('qtde').AsFloat;
           q_aux2.ParamByName('qtde_operacao').AsFloat       := q_geral.FieldByName('qtde').AsFloat;
           q_aux2.ParamByName('serie').AsString              := q_aux.FieldByName('serie').AsString;
           q_aux2.ExecSQL;


         // apaga compras itens


         q_aux2.Close;
         q_aux2.SQL.Clear;
         q_aux2.SQL.Text:= ' delete from compras_itens ' +
                          ' where cod_controle= :cod_controle ' +
                          ' and cod_empresa= :cod_empresa ' ;
         q_aux2.ParamByName('cod_empresa').AsInteger  := p_cod_empresa;
         q_aux2.ParamByName('cod_controle').AsInteger := p_controle;
         q_aux2.ExecSQL;

         // apaga capa

         q_aux2.Close;
         q_aux2.SQL.Clear;
         q_aux2.SQL.Text:= ' delete from compras ' +
                          ' where cod_controle= :cod_controle ' +
                          ' and cod_empresa= :cod_empresa ' ;
         q_aux2.ParamByName('cod_empresa').AsInteger  := p_cod_empresa;
         q_aux2.ParamByName('cod_controle').AsInteger := p_controle;
         q_aux2.ExecSQL ;

        // Acerta custo atual do item


         q_aux2.Close;
         q_aux2.SQL.Clear;
         q_aux2.SQL.Text:= ' update itens_custos set custo_contabil= :custo_contabil ' +
                          ' where cod_item = :cod_item ' +
                          ' and cod_empresa= :cod_empresa ' +
                          ' and cod_fornecedor = :cod_fornecedor ' ;

         q_aux2.ParamByName('custo_contabil').AsFloat :=q_aux.FieldByName('custo_medio_anterior').AsFloat;
         q_aux2.ParamByName('cod_item').AsString:= q_geral.FieldByName('cod_item').AsString;
         q_aux2.ParamByName('cod_empresa').AsInteger := p_cod_empresa;
         q_aux2.ParamByName('cod_fornecedor').AsInteger :=q_geral.FieldByName('cod_fornecedor').AsInteger;
         q_aux2.ExecSQL;

         controller.dm.banco.Commit;

         addtoinitproc(swalSuccess('Confirmação!','NF de compra excluída com sucesso!'));
except

 on E: Exception do
   begin
   controller.DM.banco.Rollback;
   addtoinitproc(swalError('Erro:',E.Message ));

   end;


end;






end;

procedure TFormCompras.IWAppFormCreate(Sender: TObject);
begin
  inherited;
RegisterCallBack('TBCompras', TBCompras);
end;

procedure TFormCompras.IWBTNACAOAsyncClick(Sender: TObject;
  EventParams: TStringList);
  var
  id : string;
begin
  inherited;
     //Mostrar detalhe da NF
      if copy(iwacao.Text, 1, 5) = 'EditN' then
        begin
          id := copy(iwacao.Text, 6, Length(iwacao.Text));

          q_compras_itens.Close;
          q_compras_itens.ParamByName('cod_empresa').AsInteger:= controller.xcod_empresa;
          q_compras_itens.ParamByName('cod_controle').AsInteger:= strtoint(id);
          q_compras_itens.Open();
          grid_compras_itens.Repaint;

          WebApplication.CallBackResponse.AddJavaScriptToExecute
          ('$(''#MDCompras'').modal(''show'');');


        end;

        //Excluir NF de compra

        if copy(iwacao.Text, 1, 5) = 'ExcNF' then
        begin
          id := copy(iwacao.Text, 6, Length(iwacao.Text));

           excluir_compra(strtoint(id),controller.xcod_empresa);


        end;

end;



procedure TFormCompras.TBCompras(aParams: TStrings; out aResult: string);
var
  wresult: string;
  wtotal: integer;
  btn1: string;
  btn2: string;
  btn3: string;
  btn4: string;
  id: string;
begin
  q_datatable.close;
  q_datatable.SQL.Clear;

  q_datatable.SQL.Add(' select count(*) as total  ');
  q_datatable.SQL.Add(' from compras   ');
  q_datatable.SQL.Add(' where 1=1  ') ;



  q_datatable.SQL.Add('and ( cod_controle like ''%' +
    stringreplace(UpperCase(aParams.Values['search[value]']), ' ', '%',
    [rfReplaceAll]) + '%'' ');
  q_datatable.SQL.Add('      OR  numero_nota like ''%' +
    stringreplace(UpperCase(aParams.Values['search[value]']), ' ', '%',
    [rfReplaceAll]) + '%''  ');

  q_datatable.SQL.Add('      OR  cod_empresa like ''%' +
    stringreplace(UpperCase(aParams.Values['search[value]']), ' ', '%',
    [rfReplaceAll]) + '%'' ) ');

//  q_datatable.SQL.Add('      OR   ncm like ''%' +
//    stringreplace(UpperCase(aParams.Values['search[value]']), ' ', '%',
//    [rfReplaceAll]) + '%'' ) ');

  q_datatable.FetchOptions.RecsMax := -1;
  q_datatable.FetchOptions.RecsSkip := -1;

  q_datatable.Open;

  wtotal := q_datatable.FieldByName('total').AsInteger;

  //
  // Select para montar o resultado do ajax na solicitacao do DATATABLE
  //
  q_datatable.close;

  q_datatable.SQL.Clear;
  q_datatable.sql.add('SELECT CLI.NOME,C.* FROM COMPRAS C, CLIENTES CLI');
  q_datatable.sql.add('WHERE C.COD_CLIENTE=CLI.COD_CLIENTE');



 // q_datatable.SQL.Add(' where   1=1   ');

  q_datatable.SQL.Add('and ( c.cod_controle like ''%' +
    stringreplace(UpperCase(aParams.Values['search[value]']), ' ', '%',
    [rfReplaceAll]) + '%'' ');

  q_datatable.SQL.Add('      OR  c.numero_nota like ''%' +
    stringreplace(UpperCase(aParams.Values['search[value]']), ' ', '%',
    [rfReplaceAll]) + '%''  ');

//    q_datatable.SQL.Add('      OR  fornecedor like ''%' +
//    stringreplace(UpperCase(aParams.Values['search[value]']), ' ', '%',
//    [rfReplaceAll]) + '%''  ');

  q_datatable.SQL.Add('      OR  c.cod_cliente like ''%' +
    stringreplace(UpperCase(aParams.Values['search[value]']), ' ', '%',
    [rfReplaceAll]) + '%'' ) ');

  // definindo a ordenação
  case aParams.Values['order[0][column]'].ToInteger of
    0:
      q_datatable.SQL.Add('Order by cli.nome ' + aParams.Values
        ['order[0][dir]'] + ' ');
    1:
      q_datatable.SQL.Add('Order by  c.cod_controle ' + aParams.Values
        ['order[0][dir]'] + ' ');

  end;

  q_datatable.FetchOptions.RecsMax := strtoint(aParams.Values['length']);
  q_datatable.FetchOptions.RecsSkip := strtoint(aParams.Values['start']);

  q_datatable.Open;

  //
  // Montagem da variavel com o JASON de resultado da consulta
  //
  wresult := '{' + '"draw": ' + StrToIntDef(aParams.Values['draw'], 0).ToString
    + ', ' + '"recordsTotal": ' + wtotal.ToString + ', ' + '"recordsFiltered": '
    + wtotal.ToString + ', ' + '"data": [';
  q_datatable.First;
  btn2 := '';
  btn3 := '';
  id := '';
  while not q_datatable.Eof do
  begin

    id := q_datatable.FieldByName('cod_controle').AsString;


    btn1 := '"<button type=\"buttom\" class=\"btn btn-xs btn-danger\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Excluir Nota\" data-dismiss=\"modal\" onclick=\"SetaAcao(''ExcNF'''
      + ',' + quotedstr(id) + ')\" > <i class=\"fa  fa-trash\"> </i> </button> ';

    btn2 := '<button type=\"buttom\" class=\"btn btn-xs btn-info\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Detalhes da NF\" onclick=\"SetaAcao(''EditN'''
      + ',' + id + ')\" > <i class=\"fa fa-external-link\"> </i> </button> "';
    btn3 := '<button type=\"buttom\" class=\"btn btn-xs btn-info\"  data-toggle=\"tooltip\" data-placement=\"top\" title=\"Aprovar Operador\" onclick=\"SetaAcao(''aprOp'''
      + ',' + id + ')\"> <i class=\"fa fa-thumbs-o-up\"> </i> </button> ';

    btn4 := '<button type=\"buttom\" class=\"btn btn-xs btn-default\"  data-toggle=\"tooltip\" data-placement=\"top\" title=\"Gerar proposta no NBS\" onclick=\"SetaAcao(''ExcDo'''
      + ',' + id + ')\"> <i class=\"fa fa-database\"> </i> </button> "';

    //
    wresult := wresult + '[' + '"' +
      stringreplace(Trim(q_datatable.FieldByName('cod_empresa').AsString), '"', '\"',
      [rfReplaceAll]) + '", ' +
    // Separador de colunas ------------------------------

      '"' + stringreplace(Trim(q_datatable.FieldByName('cod_controle').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +
    // Separador de colunas ------------------------------

      '"' + stringreplace(Trim(q_datatable.FieldByName('numero_nota').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +
      '"' + stringreplace(Trim(q_datatable.FieldByName('serie').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +


    // Separador de colunas ------------------------------
    '"' + stringreplace(Trim(q_datatable.FieldByName('cod_cliente').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +


    // Separador de colunas ------------------------------
    '"' + stringreplace(Trim(q_datatable.FieldByName('nome').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +

'"' + stringreplace(Trim(q_datatable.FieldByName('data_emissao').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +


    // Separador de colunas ------------------------------
    '"' + stringreplace(Trim(q_datatable.FieldByName('data_entrada').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +


    // Separador de colunas ------------------------------
    '"' + stringreplace(Trim(q_datatable.FieldByName('total_produto').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +


    // Separador de colunas ------------------------------
    '"' + stringreplace(Trim(q_datatable.FieldByName('total_nota').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +


    // Separador de colunas ------------------------------
    '"' + stringreplace(Trim(q_datatable.FieldByName('base_icms').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +


    // Separador de colunas ------------------------------
    '"' + stringreplace(Trim(q_datatable.FieldByName('valor_icms').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +


    // Separador de colunas ------------------------------
    '"' + stringreplace(Trim(q_datatable.FieldByName('valor_ipi').AsString),
      '"', '\"', [rfReplaceAll]) + '", ' +




    // Separador de colunas ------------------------------

       btn1   +  btn2   + '],';

    q_datatable.Next;

  end;
  q_datatable.close;

  if wtotal <= 0 then
    wresult := wresult + ']}'
  else
    wresult := LeftStr(Trim(wresult), Length(Trim(wresult)) - 1) + ']}';

  //
  // Envia o resultado para o ajax do DataTable
  aResult := wresult;

  // abco


end;


end.
